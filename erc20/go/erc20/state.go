// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package erc20
import "github.com/iotaledger/wasp/packages/vm/wasmlib/go/wasmlib"

type MapAgentIDToImmutableAllowancesForAgent struct {
	objID int32
}

func (m MapAgentIDToImmutableAllowancesForAgent) GetAllowancesForAgent(key wasmlib.ScAgentID) ImmutableAllowancesForAgent {
	subID := wasmlib.GetObjectID(m.objID, key.KeyID(), wasmlib.TYPE_MAP)
	return ImmutableAllowancesForAgent{objID: subID}
}

type ImmutableERC20State struct {
	id int32
}

func (s ImmutableERC20State) Allowances() MapAgentIDToImmutableAllowancesForAgent {
	mapID := wasmlib.GetObjectID(s.id, idxMap[IdxStateAllowances], wasmlib.TYPE_MAP)
	return MapAgentIDToImmutableAllowancesForAgent{objID: mapID}
}

func (s ImmutableERC20State) Balances() MapAgentIDToImmutableInt64 {
	mapID := wasmlib.GetObjectID(s.id, idxMap[IdxStateBalances], wasmlib.TYPE_MAP)
	return MapAgentIDToImmutableInt64{objID: mapID}
}

func (s ImmutableERC20State) Decimals() wasmlib.ScImmutableInt16 {
	return wasmlib.NewScImmutableInt16(s.id, idxMap[IdxStateDecimals])
}

func (s ImmutableERC20State) Name() wasmlib.ScImmutableString {
	return wasmlib.NewScImmutableString(s.id, idxMap[IdxStateName])
}

func (s ImmutableERC20State) Owner() wasmlib.ScImmutableAgentID {
	return wasmlib.NewScImmutableAgentID(s.id, idxMap[IdxStateOwner])
}

func (s ImmutableERC20State) Supply() wasmlib.ScImmutableInt64 {
	return wasmlib.NewScImmutableInt64(s.id, idxMap[IdxStateSupply])
}

func (s ImmutableERC20State) Symbol() wasmlib.ScImmutableString {
	return wasmlib.NewScImmutableString(s.id, idxMap[IdxStateSymbol])
}

type MapAgentIDToMutableAllowancesForAgent struct {
	objID int32
}

func (m MapAgentIDToMutableAllowancesForAgent) Clear() {
	wasmlib.Clear(m.objID)
}

func (m MapAgentIDToMutableAllowancesForAgent) GetAllowancesForAgent(key wasmlib.ScAgentID) MutableAllowancesForAgent {
	subID := wasmlib.GetObjectID(m.objID, key.KeyID(), wasmlib.TYPE_MAP)
	return MutableAllowancesForAgent{objID: subID}
}

type MutableERC20State struct {
	id int32
}

func (s MutableERC20State) Allowances() MapAgentIDToMutableAllowancesForAgent {
	mapID := wasmlib.GetObjectID(s.id, idxMap[IdxStateAllowances], wasmlib.TYPE_MAP)
	return MapAgentIDToMutableAllowancesForAgent{objID: mapID}
}

func (s MutableERC20State) Balances() MapAgentIDToMutableInt64 {
	mapID := wasmlib.GetObjectID(s.id, idxMap[IdxStateBalances], wasmlib.TYPE_MAP)
	return MapAgentIDToMutableInt64{objID: mapID}
}

func (s MutableERC20State) Decimals() wasmlib.ScMutableInt16 {
	return wasmlib.NewScMutableInt16(s.id, idxMap[IdxStateDecimals])
}

func (s MutableERC20State) Name() wasmlib.ScMutableString {
	return wasmlib.NewScMutableString(s.id, idxMap[IdxStateName])
}

func (s MutableERC20State) Owner() wasmlib.ScMutableAgentID {
	return wasmlib.NewScMutableAgentID(s.id, idxMap[IdxStateOwner])
}

func (s MutableERC20State) Supply() wasmlib.ScMutableInt64 {
	return wasmlib.NewScMutableInt64(s.id, idxMap[IdxStateSupply])
}

func (s MutableERC20State) Symbol() wasmlib.ScMutableString {
	return wasmlib.NewScMutableString(s.id, idxMap[IdxStateSymbol])
}
