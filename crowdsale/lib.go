// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

//nolint:dupl
package crowdsale

import "github.com/iotaledger/wasp/packages/vm/wasmlib"

func OnLoad() {
	exports := wasmlib.NewScExports()
	exports.AddFunc(FuncInit, funcInitThunk)
	exports.AddFunc(FuncPurchase, funcPurchaseThunk)
	exports.AddFunc(FuncSetOwner, funcSetOwnerThunk)
	exports.AddFunc(FuncWithdraw, funcWithdrawThunk)
	exports.AddView(ViewGetOwner, viewGetOwnerThunk)
	exports.AddView(ViewPurchaseInfo, viewPurchaseInfoThunk)
	exports.AddView(ViewPurchaseView, viewPurchaseViewThunk)

	for i, key := range keyMap {
		idxMap[i] = key.KeyID()
	}
}

type InitContext struct {
	Params ImmutableInitParams
	State  MutableCrowdSaleState
}

func funcInitThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("crowdsale.funcInit")
	f := &InitContext{
		Params: ImmutableInitParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableCrowdSaleState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	funcInit(ctx, f)
	ctx.Log("crowdsale.funcInit ok")
}

type PurchaseContext struct {
	Params ImmutablePurchaseParams
	State  MutableCrowdSaleState
}

func funcPurchaseThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("crowdsale.funcPurchase")
	f := &PurchaseContext{
		Params: ImmutablePurchaseParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableCrowdSaleState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	funcPurchase(ctx, f)
	ctx.Log("crowdsale.funcPurchase ok")
}

type SetOwnerContext struct {
	Params ImmutableSetOwnerParams
	State  MutableCrowdSaleState
}

func funcSetOwnerThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("crowdsale.funcSetOwner")
	// current owner of this smart contract
	access := ctx.State().GetAgentID(wasmlib.Key("owner"))
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	f := &SetOwnerContext{
		Params: ImmutableSetOwnerParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableCrowdSaleState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Owner().Exists(), "missing mandatory owner")
	funcSetOwner(ctx, f)
	ctx.Log("crowdsale.funcSetOwner ok")
}

type WithdrawContext struct {
	Params ImmutableWithdrawParams
	State  MutableCrowdSaleState
}

func funcWithdrawThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("crowdsale.funcWithdraw")
	// only SC creator can withdraw funds
	ctx.Require(ctx.Caller() == ctx.ContractCreator(), "no permission")

	f := &WithdrawContext{
		Params: ImmutableWithdrawParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		State: MutableCrowdSaleState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	funcWithdraw(ctx, f)
	ctx.Log("crowdsale.funcWithdraw ok")
}

type GetOwnerContext struct {
	Results MutableGetOwnerResults
	State   ImmutableCrowdSaleState
}

func viewGetOwnerThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("crowdsale.viewGetOwner")
	f := &GetOwnerContext{
		Results: MutableGetOwnerResults{
			id: wasmlib.OBJ_ID_RESULTS,
		},
		State: ImmutableCrowdSaleState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	viewGetOwner(ctx, f)
	ctx.Log("crowdsale.viewGetOwner ok")
}

type PurchaseInfoContext struct {
	Results MutablePurchaseInfoResults
	State   ImmutableCrowdSaleState
}

func viewPurchaseInfoThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("crowdsale.viewPurchaseInfo")
	f := &PurchaseInfoContext{
		Results: MutablePurchaseInfoResults{
			id: wasmlib.OBJ_ID_RESULTS,
		},
		State: ImmutableCrowdSaleState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	viewPurchaseInfo(ctx, f)
	ctx.Log("crowdsale.viewPurchaseInfo ok")
}

type PurchaseViewContext struct {
	Params  ImmutablePurchaseViewParams
	Results MutablePurchaseViewResults
	State   ImmutableCrowdSaleState
}

func viewPurchaseViewThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("crowdsale.viewPurchaseView")
	f := &PurchaseViewContext{
		Params: ImmutablePurchaseViewParams{
			id: wasmlib.OBJ_ID_PARAMS,
		},
		Results: MutablePurchaseViewResults{
			id: wasmlib.OBJ_ID_RESULTS,
		},
		State: ImmutableCrowdSaleState{
			id: wasmlib.OBJ_ID_STATE,
		},
	}
	ctx.Require(f.Params.Nr().Exists(), "missing mandatory nr")
	viewPurchaseView(ctx, f)
	ctx.Log("crowdsale.viewPurchaseView ok")
}
