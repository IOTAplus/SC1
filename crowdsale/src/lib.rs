// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

// @formatter:off

#![allow(dead_code)]
#![allow(unused_imports)]

use crowdsale::*;
use wasmlib::*;
use wasmlib::host::*;

use crate::consts::*;
use crate::keys::*;
use crate::params::*;
use crate::results::*;
use crate::state::*;

mod consts;
mod contract;
mod keys;
mod params;
mod results;
mod state;
mod types;
mod crowdsale;

#[no_mangle]
fn on_load() {
    let exports = ScExports::new();
    exports.add_func(FUNC_INIT, func_init_thunk);
    exports.add_func(FUNC_PURCHASE, func_purchase_thunk);
    exports.add_func(FUNC_SET_OWNER, func_set_owner_thunk);
    exports.add_func(FUNC_WITHDRAW, func_withdraw_thunk);
    exports.add_view(VIEW_GET_OWNER, view_get_owner_thunk);
    exports.add_view(VIEW_PURCHASE_INFO, view_purchase_info_thunk);
    exports.add_view(VIEW_PURCHASE_VIEW, view_purchase_view_thunk);

    unsafe {
        for i in 0..KEY_MAP_LEN {
            IDX_MAP[i] = get_key_id_from_string(KEY_MAP[i]);
        }
    }
}

pub struct InitContext {
    params: ImmutableInitParams,
    state:  MutableCrowdSaleState,
}

fn func_init_thunk(ctx: &ScFuncContext) {
    ctx.log("crowdsale.funcInit");
    let f = InitContext {
        params: ImmutableInitParams {
            id: OBJ_ID_PARAMS,
        },
        state: MutableCrowdSaleState {
            id: OBJ_ID_STATE,
        },
    };
    func_init(ctx, &f);
    ctx.log("crowdsale.funcInit ok");
}

pub struct PurchaseContext {
    params: ImmutablePurchaseParams,
    state:  MutableCrowdSaleState,
}

fn func_purchase_thunk(ctx: &ScFuncContext) {
    ctx.log("crowdsale.funcPurchase");
    let f = PurchaseContext {
        params: ImmutablePurchaseParams {
            id: OBJ_ID_PARAMS,
        },
        state: MutableCrowdSaleState {
            id: OBJ_ID_STATE,
        },
    };
    func_purchase(ctx, &f);
    ctx.log("crowdsale.funcPurchase ok");
}

pub struct SetOwnerContext {
    params: ImmutableSetOwnerParams,
    state:  MutableCrowdSaleState,
}

fn func_set_owner_thunk(ctx: &ScFuncContext) {
    ctx.log("crowdsale.funcSetOwner");
    // current owner of this smart contract
    let access = ctx.state().get_agent_id("owner");
    ctx.require(access.exists(), "access not set: owner");
    ctx.require(ctx.caller() == access.value(), "no permission");

    let f = SetOwnerContext {
        params: ImmutableSetOwnerParams {
            id: OBJ_ID_PARAMS,
        },
        state: MutableCrowdSaleState {
            id: OBJ_ID_STATE,
        },
    };
    ctx.require(f.params.owner().exists(), "missing mandatory owner");
    func_set_owner(ctx, &f);
    ctx.log("crowdsale.funcSetOwner ok");
}

pub struct WithdrawContext {
    params: ImmutableWithdrawParams,
    state:  MutableCrowdSaleState,
}

fn func_withdraw_thunk(ctx: &ScFuncContext) {
    ctx.log("crowdsale.funcWithdraw");
    // only SC creator can withdraw funds
    ctx.require(ctx.caller() == ctx.contract_creator(), "no permission");

    let f = WithdrawContext {
        params: ImmutableWithdrawParams {
            id: OBJ_ID_PARAMS,
        },
        state: MutableCrowdSaleState {
            id: OBJ_ID_STATE,
        },
    };
    func_withdraw(ctx, &f);
    ctx.log("crowdsale.funcWithdraw ok");
}

pub struct GetOwnerContext {
    results: MutableGetOwnerResults,
    state:   ImmutableCrowdSaleState,
}

fn view_get_owner_thunk(ctx: &ScViewContext) {
    ctx.log("crowdsale.viewGetOwner");
    let f = GetOwnerContext {
        results: MutableGetOwnerResults {
            id: OBJ_ID_RESULTS,
        },
        state: ImmutableCrowdSaleState {
            id: OBJ_ID_STATE,
        },
    };
    view_get_owner(ctx, &f);
    ctx.log("crowdsale.viewGetOwner ok");
}

pub struct PurchaseInfoContext {
    results: MutablePurchaseInfoResults,
    state:   ImmutableCrowdSaleState,
}

fn view_purchase_info_thunk(ctx: &ScViewContext) {
    ctx.log("crowdsale.viewPurchaseInfo");
    let f = PurchaseInfoContext {
        results: MutablePurchaseInfoResults {
            id: OBJ_ID_RESULTS,
        },
        state: ImmutableCrowdSaleState {
            id: OBJ_ID_STATE,
        },
    };
    view_purchase_info(ctx, &f);
    ctx.log("crowdsale.viewPurchaseInfo ok");
}

pub struct PurchaseViewContext {
    params:  ImmutablePurchaseViewParams,
    results: MutablePurchaseViewResults,
    state:   ImmutableCrowdSaleState,
}

fn view_purchase_view_thunk(ctx: &ScViewContext) {
    ctx.log("crowdsale.viewPurchaseView");
    let f = PurchaseViewContext {
        params: ImmutablePurchaseViewParams {
            id: OBJ_ID_PARAMS,
        },
        results: MutablePurchaseViewResults {
            id: OBJ_ID_RESULTS,
        },
        state: ImmutableCrowdSaleState {
            id: OBJ_ID_STATE,
        },
    };
    ctx.require(f.params.nr().exists(), "missing mandatory nr");
    view_purchase_view(ctx, &f);
    ctx.log("crowdsale.viewPurchaseView ok");
}

// @formatter:on
