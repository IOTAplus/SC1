// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use wasmlib::host::*;

use crate::*;
use crate::keys::*;
use crate::types::*;

pub struct ArrayOfImmutablePurchaseIEXP {
    pub(crate) obj_id: i32,
}

impl ArrayOfImmutablePurchaseIEXP {
    pub fn length(&self) -> i32 {
        get_length(self.obj_id)
    }

    pub fn get_purchase_iexp(&self, index: i32) -> ImmutablePurchaseIEXP {
        ImmutablePurchaseIEXP { obj_id: self.obj_id, key_id: Key32(index) }
    }
}

#[derive(Clone, Copy)]
pub struct ImmutableCrowdSaleState {
    pub(crate) id: i32,
}

impl ImmutableCrowdSaleState {
    pub fn log(&self) -> ArrayOfImmutablePurchaseIEXP {
        let arr_id = get_object_id(self.id, idx_map(IDX_STATE_LOG), TYPE_ARRAY | TYPE_BYTES);
        ArrayOfImmutablePurchaseIEXP { obj_id: arr_id }
    }

    pub fn max_purchase(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_STATE_MAX_PURCHASE))
    }

    pub fn owner(&self) -> ScImmutableAgentID {
        ScImmutableAgentID::new(self.id, idx_map(IDX_STATE_OWNER))
    }

    pub fn total_purchase(&self) -> ScImmutableInt64 {
        ScImmutableInt64::new(self.id, idx_map(IDX_STATE_TOTAL_PURCHASE))
    }
}

pub struct ArrayOfMutablePurchaseIEXP {
    pub(crate) obj_id: i32,
}

impl ArrayOfMutablePurchaseIEXP {
    pub fn clear(&self) {
        clear(self.obj_id);
    }

    pub fn length(&self) -> i32 {
        get_length(self.obj_id)
    }

    pub fn get_purchase_iexp(&self, index: i32) -> MutablePurchaseIEXP {
        MutablePurchaseIEXP { obj_id: self.obj_id, key_id: Key32(index) }
    }
}

#[derive(Clone, Copy)]
pub struct MutableCrowdSaleState {
    pub(crate) id: i32,
}

impl MutableCrowdSaleState {
    pub fn log(&self) -> ArrayOfMutablePurchaseIEXP {
        let arr_id = get_object_id(self.id, idx_map(IDX_STATE_LOG), TYPE_ARRAY | TYPE_BYTES);
        ArrayOfMutablePurchaseIEXP { obj_id: arr_id }
    }

    pub fn max_purchase(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_STATE_MAX_PURCHASE))
    }

    pub fn owner(&self) -> ScMutableAgentID {
        ScMutableAgentID::new(self.id, idx_map(IDX_STATE_OWNER))
    }

    pub fn total_purchase(&self) -> ScMutableInt64 {
        ScMutableInt64::new(self.id, idx_map(IDX_STATE_TOTAL_PURCHASE))
    }
}
