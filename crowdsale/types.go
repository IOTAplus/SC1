// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package crowdsale

import "github.com/iotaledger/wasp/packages/vm/wasmlib"

type PurchaseIEXP struct {
	Amount    int64             // amount purchased
	Error     string            // error to be reported to purchaser if anything goes wrong
	Feedback  string            // the feedback for the person who purchase
	Purchaser wasmlib.ScAgentID // who purchased
	Timestamp int64             // when the purchase took place
}

func NewPurchaseIEXPFromBytes(bytes []byte) *PurchaseIEXP {
	decode := wasmlib.NewBytesDecoder(bytes)
	data := &PurchaseIEXP{}
	data.Amount = decode.Int64()
	data.Error = decode.String()
	data.Feedback = decode.String()
	data.Purchaser = decode.AgentID()
	data.Timestamp = decode.Int64()
	decode.Close()
	return data
}

func (o *PurchaseIEXP) Bytes() []byte {
	return wasmlib.NewBytesEncoder().
		Int64(o.Amount).
		String(o.Error).
		String(o.Feedback).
		AgentID(o.Purchaser).
		Int64(o.Timestamp).
		Data()
}

type ImmutablePurchaseIEXP struct {
	objID int32
	keyID wasmlib.Key32
}

func (o ImmutablePurchaseIEXP) Exists() bool {
	return wasmlib.Exists(o.objID, o.keyID, wasmlib.TYPE_BYTES)
}

func (o ImmutablePurchaseIEXP) Value() *PurchaseIEXP {
	return NewPurchaseIEXPFromBytes(wasmlib.GetBytes(o.objID, o.keyID, wasmlib.TYPE_BYTES))
}

type MutablePurchaseIEXP struct {
	objID int32
	keyID wasmlib.Key32
}

func (o MutablePurchaseIEXP) Exists() bool {
	return wasmlib.Exists(o.objID, o.keyID, wasmlib.TYPE_BYTES)
}

func (o MutablePurchaseIEXP) SetValue(value *PurchaseIEXP) {
	wasmlib.SetBytes(o.objID, o.keyID, wasmlib.TYPE_BYTES, value.Bytes())
}

func (o MutablePurchaseIEXP) Value() *PurchaseIEXP {
	return NewPurchaseIEXPFromBytes(wasmlib.GetBytes(o.objID, o.keyID, wasmlib.TYPE_BYTES))
}
